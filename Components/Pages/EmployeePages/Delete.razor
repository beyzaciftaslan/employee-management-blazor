@page "/employees/delete"
@using demo.Models
@using demo.Services
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Employee</h2>
    <hr />
    @if (employee is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@employee.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@employee.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@employee.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">BirthDate</dt>
            <dd class="col-sm-10">@employee.BirthDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Position</dt>
            <dd class="col-sm-10">@employee.Position</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HireDate</dt>
            <dd class="col-sm-10">@employee.HireDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">State</dt>
            <dd class="col-sm-10">@employee.State</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Notes</dt>
            <dd class="col-sm-10">@employee.Notes</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HomeAddress</dt>
            <dd class="col-sm-10">@employee.HomeAddress</dd>
        </dl>
        <EditForm method="post" Model="employee" OnValidSubmit="DeleteEmployee" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(employee is null)">Delete</button> |
            <a href="/employees">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Employee? employee;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        employee = await EmployeeService.GetEmployeeByIdAsync(Id);

        if (employee is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEmployee()
    {
        if (employee != null)
        {
            var success = await EmployeeService.DeleteEmployeeAsync(employee);
            if (success)
            {
                NavigationManager.NavigateTo("/employees");
            }
            // You can add error handling here if needed
        }
    }
}
