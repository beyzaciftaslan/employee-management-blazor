@page "/employees/edit"
@using demo.Models
@using demo.Services
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager

<PageTitle>Edit Employee</PageTitle>

<h3>Edit Employee</h3>
<hr />
@if (Employee is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Employee" OnValidSubmit="UpdateEmployee" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Employee.Id" value="@Employee.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputSelect id="title" @bind-Value="Employee.Title" class="form-select" aria-required="true">
                        <option value="">-- Select Title --</option>
                        <option value="Dr.">Dr.</option>
                        <option value="Mr.">Mr.</option>
                        <option value="Mrs.">Mrs.</option>
                        <option value="Ms.">Ms.</option>
                        <option value="Prof.">Prof.</option>
                    </InputSelect>
                    <ValidationMessage For="() => Employee.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Employee.FirstName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Employee.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Employee.LastName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Employee.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="birthdate" class="form-label">BirthDate:</label>
                    <InputDate id="birthdate" @bind-Value="Employee.BirthDate" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Employee.BirthDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="position" class="form-label">Position:</label>
                    <InputText id="position" @bind-Value="Employee.Position" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Employee.Position" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="hiredate" class="form-label">HireDate:</label>
                    <InputDate id="hiredate" @bind-Value="Employee.HireDate" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Employee.HireDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="state" class="form-label">State:</label>
                    <InputText id="state" @bind-Value="Employee.State" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Employee.State" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="notes" class="form-label">Notes:</label>
                    <InputText id="notes" @bind-Value="Employee.Notes" class="form-control" />
                    <ValidationMessage For="() => Employee.Notes" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="homeaddress" class="form-label">HomeAddress:</label>
                    <InputText id="homeaddress" @bind-Value="Employee.HomeAddress" class="form-control" />
                    <ValidationMessage For="() => Employee.HomeAddress" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/employees">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Employee? Employee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Employee ??= await EmployeeService.GetEmployeeByIdAsync(Id);

        if (Employee is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateEmployee()
    {
        var success = await EmployeeService.UpdateEmployeeAsync(Employee!);

        if (success)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // Employee not found or concurrency issue
            var exists = await EmployeeService.EmployeeExistsAsync(Employee!.Id);
            if (!exists)
            {
                NavigationManager.NavigateTo("notfound");
            }
            // You can add additional error handling here if needed
        }
    }
}